package com.codingapi.springboot.permission.jdbc;

import com.codingapi.springboot.permission.sql.SQL;
import com.codingapi.springboot.permission.analyze.SqlAnalyzer;

import java.sql.*;

/**
 * @author lorne
 * @since 1.0.0
 */
public class ConnectionProxy extends BaseConnection {

    private final Connection delegate;

    public ConnectionProxy(Connection delegate) {
        super(delegate);
        this.delegate = delegate;
    }

    @Override
    public Statement createStatement() throws SQLException {
        return delegate.createStatement();
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql()),executeSql);
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return delegate.prepareCall(executeSql.getSql());
    }

    @Override
    public String nativeSQL(String sql) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return delegate.nativeSQL(executeSql.getSql());
    }


    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return delegate.createStatement(resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql(), resultSetType, resultSetConcurrency),executeSql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        //todo MyCallableStatement
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return delegate.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql(), resultSetType, resultSetConcurrency, resultSetHoldability),executeSql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        //todo MyCallableStatement
        return delegate.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql(), autoGeneratedKeys),executeSql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql(), columnIndexes),executeSql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        SqlAnalyzer sqlAnalyzer = new SqlAnalyzer(sql);
        SQL executeSql = sqlAnalyzer.getSql();
        return new PreparedStatementProxy(delegate.prepareStatement(executeSql.getSql(), columnNames),executeSql);
    }

}
